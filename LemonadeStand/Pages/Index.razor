@page "/"
@using LemonadeStand.DAL.Fruits;
@using LemonadeStand.Interfaces;
@using LemonadeStand.Model;
@using System.Collections.ObjectModel;
@using LemonadeStand.Model.Recipes;
@inject IFruitPressService FruitPressService
@using LemonadeStand.Components;
@*@inherits IndexBase;*@

<head>
    <!-- Standard Bootstrap CSS from CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

    <!-- Default values for additional CSS Variables (+ import Bootstrap Icons) -->
    <link href="_content/Havit.Blazor.Components.Web.Bootstrap/defaults.css" rel="stylesheet" />

    <!-- Blazor CSS Isolation -->
    <link href="Your.Blazor.Project.Assembly.Name.styles.css" rel="stylesheet" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <PageTitle>Index</PageTitle>
    <img class="rounded mx-auto d-block" src="life.png">
    <h1 class="lemonadestand">Denice Lemonade Stand Code Test</h1>
    <hr />

    <h2>Available recipies</h2>

    <table class="table table-bordered table-warning">
        <thead>
            <tr>
                <th>Apple Lemonade</th>
                <th>Melon Lemonade</th>
                <th>Orange Lemonade</th>
            </tr>
            <tr>
                <th>Price per glass: 10</th>
                <th>Price per glass: 12</th>
                <th>Price per glass: 9</th>
            </tr>
            <tr>
                <th>Fruits needed per glass: 2,5 Apple (s)</th>
                <th>Fruits needed per glass: 0,5 Melon (s)</th>
                <th>Fruits needed per glass: 1 Orange (s)</th>
            </tr>
        </thead>
    </table>
    <hr />

    <h1>Customer Order</h1>

    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Modal Heading</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    @fruitPressed.Result
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="StartOver">Close</button>
                </div>

            </div>
        </div>
    </div>
    <div class="d-flex mt-5 justify-content-center">
        <button type="button" class="btn btn-success" style="width: 25rem;" id="cup-button" @onclick="AppleLemonade"><i class="bi bi-cup-straw">Apple Lemonade</i></button>

        <button type="button" class="btn btn-danger" style="width: 25rem;" id="cup-button" @onclick="MelonLemonade"><i class="bi bi-cup-straw">Melon Lemonade</i></button>

        <button type="button" class="btn btn-warning" style="width: 25rem;" id="cup-button" @onclick="OrangeLemonade"><i class="bi bi-cup-straw">Orange Lemonade</i></button>
    </div>
    <div class="d-flex mt-5 justify-content-center">
    <div class="card" style="width:30rem; content-center">
            <img src="Apples.jpg" class="card-img-top"/>
            <div class="card-body">
                <p class="text fw-bold">Apples added: @amountOfApples</p>
                <button type="button" class="btn btn-outline-dark" @onclick="AddApples">Add apples</button>
                <button type="button" class="btn btn-outline-dark" @onclick="RemoveApples">Remove apples</button>
            </div>
    </div>    
    <div class="card" style="width:30rem;">
            <img src="melons.jpg" class="card-img-top"/>
            <div class="card-body">
                <p class="text fw-bold">Melons added: @amountOfMelons</p>
                <button type="button" class="btn btn-outline-dark " @onclick="AddMelons">Add melons</button>
                <button type="button" class="btn btn-outline-dark" @onclick="RemoveMelons">Remove melons</button>
            </div>
    </div>    
    <div class="card" style="width:30rem;">
            <img src="Oranges.jpg" class="card-img-top"/>
            <div class="card-body">
                <p class="text fw-bold">Oranges added: @amountOfOranges</p>
                <button type="button" class="btn btn-outline-dark" @onclick="AddOranges">Add oranges</button>
                <button type="button" class="btn btn-outline-dark" @onclick="RemoveOranges">Remove oranges</button>
            </div>
    </div>
    </div>

    <div>
        <p class="text fw-bold"> Ordered quantity: @orderedQuantity</p>
        <button type="button" class="btn btn-outline-dark" @onclick="AddToOrderedQuantity">Add glasses to order</button>
        <button type="button" class="btn btn-outline-dark" @onclick="RemoveFromOrderedQuantity">Remove glasses from order</button>
        <p class="text fw-bold"> Money paid: @moneyPaid</p>
        <button type="button" class="btn btn-outline-dark" @onclick="AddMoney">Add money</button>
        <button type="button" class="btn btn-outline-dark" @onclick="RemoveMoney">Remove money</button>
    </div>

    <div id="process-btn">
        <button type="button" class="btn btn-success btn-block" data-bs-toggle="modal" data-bs-target="#myModal" @onclick="ProcessOrder">
            Process order
        </button>
    </div>

</body>

@code {
    private FruitPressResult fruitPressed { get; set; } = new FruitPressResult(); 
    private Collection<IFruit> fruits = new Collection<IFruit>();
    private Apple apple = new Apple();
    private Melon melon = new Melon();
    private Orange orange= new Orange(); 
    private IRecipe recipe; 


    private int orderedQuantity = 0; 
    private int moneyPaid = 0;

    private decimal amountOfApples = 0;
    private decimal amountOfMelons = 0; 
    private decimal amountOfOranges = 0; 

    protected void AppleLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new AppleLemonadeRecipe();
    }

    protected void MelonLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new MelonLemonadeRecipe();
    }

    protected void OrangeLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new OrangeLemonadeRecipe();
    }

    protected void AddToOrderedQuantity(MouseEventArgs mouseEventArgs)
    {
        orderedQuantity++;
    }

    protected void RemoveFromOrderedQuantity(MouseEventArgs mouseEventArgs)
    {
        orderedQuantity--;
        if (orderedQuantity < 0)
            orderedQuantity = 0;
    }

    protected void AddMoney(MouseEventArgs mouseEventArgs)
    {
        moneyPaid++;
    }

    protected void RemoveMoney(MouseEventArgs mouseEventArgs)
    {
        moneyPaid--;
        if (moneyPaid < 0)
            moneyPaid = 0;
    }

    protected void AddApples(MouseEventArgs mouseEventArgs)
    {
        amountOfApples++;
        fruits.Add(apple);

    }
    protected void RemoveApples(MouseEventArgs mouseEventArgs)
    {
        amountOfApples--;
        fruits.Remove(apple);
        if (amountOfApples < 0)
            amountOfApples = 0;
    }

    protected void AddMelons(MouseEventArgs mouseEventArgs)
    {
        amountOfMelons++;
        fruits.Add(melon);
    }
    protected void RemoveMelons(MouseEventArgs mouseEventArgs)
    {
        amountOfMelons--;
        if (amountOfMelons < 0)
            amountOfMelons = 0;
    }

    protected void AddOranges(MouseEventArgs mouseEventArgs)
    {
        amountOfOranges++;
        fruits.Add(orange);
    }
    protected void RemoveOranges(MouseEventArgs mouseEventArgs)
    {
        amountOfOranges--;
        if (amountOfOranges < 0)
            amountOfOranges = 0;
    }

    protected void ProcessOrder(MouseEventArgs mouseEventArgs)
    {
        fruitPressed = FruitPressService.Produce(recipe, fruits, moneyPaid, orderedQuantity);
    }

    protected void StartOver(MouseEventArgs mouseEventArgs)
    {
        recipe = null;
        orderedQuantity = 0;
        moneyPaid = 0;
        amountOfApples = 0;
        amountOfMelons = 0;
        amountOfOranges = 0;

        fruitPressed = FruitPressService.Produce(null, null, moneyPaid, orderedQuantity);
    }
}
