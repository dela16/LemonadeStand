@page "/"
@using LemonadeStand.DAL.Fruits;
@using LemonadeStand.Interfaces;
@using LemonadeStand.Model;
@using System.Collections.ObjectModel;
@using LemonadeStand.Model.Recipes;
<!-- Standard Bootstrap CSS from CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

<!-- Default values for additional CSS Variables (+ import Bootstrap Icons) -->
<link href="_content/Havit.Blazor.Components.Web.Bootstrap/defaults.css" rel="stylesheet" />

<!-- Blazor CSS Isolation -->
<link href="Your.Blazor.Project.Assembly.Name.styles.css" rel="stylesheet" />



@inject IFruitPressService FruitPressService

<PageTitle>Index</PageTitle>

<h1>Denice Lemonade Stand Code Test</h1>
<hr />
    <h2>Available recipies</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Apple Lemonade</th>
                <th>Melon Lemonade</th>
                <th>Orange Lemonade</th>
            </tr>
            <tr>
                <th>Price per glass: 10</th>
                <th>Price per glass: 12</th>
                <th>Price per glass: 9</th>
            </tr> 
            <tr>
                <th>Fruits needed per glass: 2,5 Apple (s)</th>
                <th>Fruits needed per glass: 0,5 Melon (s)</th>
                <th>Fruits needed per glass: 1 Orange (s)</th>
            </tr>
        </thead>
    </table>
<hr />

<h1>Customer Order</h1>

<button type="button" class="btn btn-primary" @onclick="AppleLemonade">Apple Lemonade</button>
<button type="button" class="btn btn-primary" @onclick="MelonLemonade">Melon Lemonade</button>
<button type="button" class="btn btn-primary" @onclick="OrangeLemonade">Orange Lemonade</button>

<p> Ordered quantity: @orderedQuantity</p>
<button type="button" class="btn btn-primary" @onclick="AddToOrderedQuantity">Add glasses to order</button>
<button type="button" class="btn btn-primary" @onclick="RemoveFromOrderedQuantity">Remove glasses from order</button>

    <p> Money paid: @moneyToPayWith</p>
<button type="button" class="btn btn-primary" @onclick="AddMoney">Add money</button>
<button type="button" class="btn btn-primary" @onclick="RemoveMoney">Remove money</button>

    <p>Apples added: @amountOfApples</p>
<button type="button" class="btn btn-primary" @onclick="AddApples">Add apples</button>
<button type="button" class="btn btn-primary" @onclick="RemoveApples">Remove apples</button>

    <p>Melons added: @amountOfMelons</p>
<button type="button" class="btn btn-primary" @onclick="AddMelons">Add melons</button>
<button type="button" class="btn btn-primary" @onclick="RemoveMelons">Remove melons</button>

    <p>Oranges added: @amountOfOranges</p>
<button type="button" class="btn btn-primary" @onclick="AddOranges">Add oranges</button>
<button type="button" class="btn btn-primary" @onclick="RemoveOranges">Remove oranges</button>

<p>@fruitPressed.Result</p>
<p>Ordered Glasses: @fruitPressed.ProducedGlasses</p>
<p>Money paid: @fruitPressed.Money</p>
<button type="button" class="btn btn-primary" @onclick="ProcessOrder">Process order</button>

@code {
    private FruitPressResult fruitPressed { get; set; }
    private Collection<IFruit> fruits = new Collection<IFruit>();
    private Apple apple;
    private Melon melon;
    private Orange orange; 
    private IRecipe recipe; 


    private int orderedQuantity = 0; 
    private int moneyToPayWith = 0;

    private decimal amountOfApples = 0;
    private decimal amountOfMelons = 0; 
    private decimal amountOfOranges = 0; 

    protected void AppleLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new AppleLemonadeRecipe();
    }

    protected void MelonLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new MelonLemonadeRecipe();
    }

    protected void OrangeLemonade(MouseEventArgs mouseEventArgs)
    {
        recipe = new OrangeLemonadeRecipe();
    }

    protected void AddToOrderedQuantity(MouseEventArgs mouseEventArgs)
    {
        orderedQuantity++;
    }

    protected void RemoveFromOrderedQuantity(MouseEventArgs mouseEventArgs)
    {
        orderedQuantity--;
        if (orderedQuantity < 0)
            orderedQuantity = 0;
    }

    protected void AddMoney(MouseEventArgs mouseEventArgs)
    {
        moneyToPayWith++;
    }

    protected void RemoveMoney(MouseEventArgs mouseEventArgs)
    {
        moneyToPayWith--;
        if (moneyToPayWith < 0)
            moneyToPayWith = 0; 
    }

    protected void AddApples(MouseEventArgs mouseEventArgs)
    {
        amountOfApples++;
        fruits.Add(apple);

    }
    protected void RemoveApples(MouseEventArgs mouseEventArgs)
    {
        amountOfApples--;
        fruits.Remove(apple);
        if (amountOfApples < 0)
            amountOfApples = 0;
    }

    protected void AddMelons(MouseEventArgs mouseEventArgs)
    {
        amountOfMelons++;
        fruits.Add(melon);
    }
    protected void RemoveMelons(MouseEventArgs mouseEventArgs)
    {
        amountOfMelons--;
        if (amountOfMelons < 0)
            amountOfMelons = 0;
    }

    protected void AddOranges(MouseEventArgs mouseEventArgs)
    {
        amountOfOranges++;
        fruits.Add(orange);
    }
    protected void RemoveOranges(MouseEventArgs mouseEventArgs)
    {
        amountOfOranges--;
        if (amountOfOranges < 0)
            amountOfOranges = 0;
    }

    protected void ProcessOrder(MouseEventArgs mouseEventArgs)
    {
        fruitPressed = FruitPressService.Produce(recipe, fruits, moneyToPayWith, orderedQuantity);
    }
}